import numpy as np
import matplotlib.pyplot as plt
import math


if __name__ == '__main__':
    pic_path = 'lenna.png'
    img = plt.imread(pic_path)

    if pic_path[-4:] == '.png':
        img = img*255

    # 1. 灰度化
    img = img.mean(axis=-1)


    # 2. 高斯滤波
    sigma = 0.5
    dim = 5
    gaussian_kernel = np.zeros([dim, dim])
    n1 = 1/(2*math.pi*sigma**2)
    n2 = -1/(2*sigma**2)
    tmp = [i-dim//2 for i in range(dim)]
    for i in range(dim):
        for j in range(dim):
            gaussian_kernel[i, j] = n1*math.exp(n2*(tmp[i]**2 + tmp[j]**2))
    gaussian_kernel = gaussian_kernel / gaussian_kernel.sum()
    dx, dy = img.shape
    img_new = np.zeros(img.shape)
    tmp = dim // 2
    p = dim//2
    img_pad = np.pad(img, p, mode='constant')
    for i in range(dx):
        for j in range(dy):
            img_new[i, j] = np.sum(img_pad[i:i+dim, j:j+dim] * gaussian_kernel)
    plt.figure(1)
    print(img_new)
    plt.imshow(img_new.astype(np.uint8), cmap='gray')
    plt.axis('off') # 关闭图标的坐标轴


    # 3. 求梯度
    sobel_kernel_x = np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])
    sobel_kernel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])
    # print(sobel_kernel_x)
    # print(sobel_kernel_y)
    img_sobel_x = np.zeros([dx, dy])
    img_sobel_y = np.zeros([dx, dy])
    img_sobel = np.zeros([dx, dy])

    pad = (sobel_kernel_x.shape[0]-1)//2
    dx, dy = img.shape
    img_pad = np.pad(img, pad, mode='constant')
    for i in range(dx):
        for j in range(dy):
            img_sobel_x[i, j] = np.sum(img_pad[i:i+3, j:j+3] * sobel_kernel_x)
            img_sobel_y[i, j] = np.sum(img_pad[i:i+3, j:j+3] * sobel_kernel_y)
            img_sobel[i, j] = np.sqrt(img_sobel_x[i,j]**2 + img_sobel_y[i,j]**2)
    img_sobel_x[img_sobel_x == 0] = 0.000000001
    angle = img_sobel_y / img_sobel_x
    print(img_sobel)
    plt.figure(2)
    plt.imshow(img_sobel.astype(np.uint8), cmap='gray')
    plt.axis('off')



    # 4. 非极大值抑制
    img_yizhi = np.zeros(img_sobel.shape)
    for i in range(1, dx-1):
        for j in range(1, dy-1):
            flag = True
            temp = img_sobel[i-1:i+2, j-1:j+2]
            if angle[i, j] <= -1:  # 使用线性插值法判断抑制与否
                num_1 = (temp[0, 1] - temp[0, 0]) / angle[i, j] + temp[0, 1]
                num_2 = (temp[2, 1] - temp[2, 2]) / angle[i, j] + temp[2, 1]
                if not (img_sobel[i, j] > num_1 and img_sobel[i, j] > num_2):
                    flag = False
            elif angle[i, j] >= 1:
                num_1 = (temp[0, 2] - temp[0, 1]) / angle[i, j] + temp[0, 1]
                num_2 = (temp[2, 0] - temp[2, 1]) / angle[i, j] + temp[2, 1]
                if not (img_sobel[i, j] > num_1 and img_sobel[i, j] > num_2):
                    flag = False
            elif angle[i, j] > 0:
                num_1 = (temp[0, 2] - temp[1, 2]) * angle[i, j] + temp[1, 2]
                num_2 = (temp[2, 0] - temp[1, 0]) * angle[i, j] + temp[1, 0]
                if not (img_sobel[i, j] > num_1 and img_sobel[i, j] > num_2):
                    flag = False
            elif angle[i, j] < 0:
                num_1 = (temp[1, 0] - temp[0, 0]) * angle[i, j] + temp[1, 0]
                num_2 = (temp[1, 2] - temp[2, 2]) * angle[i, j] + temp[1, 2]
                if not (img_sobel[i, j] > num_1 and img_sobel[i, j] > num_2):
                    flag = False
            if flag:
                img_yizhi[i, j] = img_sobel[i, j]
    plt.figure(3)
    plt.imshow(img_yizhi.astype(np.uint8), cmap='gray')
    plt.axis('off')


    # 5. 双阈值算法
    low_boundry = img_yizhi.mean()
    high_boundry = 10*low_boundry
    print(low_boundry, high_boundry)
    stack = []
    for i in range(1, dx-1):
        for j in range(1, dy-1):
            if img_yizhi[i, j] >= high_boundry:
                img_yizhi[i, j] = 255
                stack.append([i, j])
            elif img_yizhi[i, j] <= low_boundry:
                img_yizhi[i, j] = 0


    while not len(stack) == 0:
        pi, pj = stack.pop()
        temp = img_yizhi[pi-1:pi+2, pj-1:pj+2]
        if temp[0,0] < high_boundry and temp[0,0] > low_boundry:
            img_yizhi[pi-1, pj-1] = 255
            stack.append([pi-1, pj-1])
        if temp[0,1] < high_boundry and temp[0,1] > low_boundry:
            img_yizhi[pi-1, pj] = 255
            stack.append([pi-1, pj])
        if temp[0,2] < high_boundry and temp[0,2] > low_boundry:
            img_yizhi[pi-1, pj+1] = 255
            stack.append([pi-1, pj+1])
        if temp[1,0] < high_boundry and temp[1,0] > low_boundry:
            img_yizhi[pi, pj-1] = 255
            stack.append([pi, pj-1])
        if temp[1,2] < high_boundry and temp[1,2] > low_boundry:
            img_yizhi[pi, pj+1] = 255
            stack.append([pi, pj+1])
        if temp[2,0] < high_boundry and temp[2,0] > low_boundry:
            img_yizhi[pi+1, pj-1] = 255
            stack.append([pi-1, pj-1])
        if temp[2,1] < high_boundry and temp[2,1] > low_boundry:
            img_yizhi[pi+1, pj] = 255
            stack.append([pi+1, pj])
        if temp[2,2] < high_boundry and temp[2,2] > low_boundry:
            img_yizhi[pi+1, pj+1] = 255
            stack.append([pi+1, pj+1])

    for i in range(img_yizhi.shape[0]):
        for i in range(img_yizhi.shape[1]):
            if img_yizhi[i,j] != 0 and img_yizhi[i,j] != 255:
                img_yizhi[i,j] = 0

    plt.figure(4)
    plt.imshow(img_yizhi.astype(np.uint8), cmap='gray')
    plt.axis('off')
    plt.show()








