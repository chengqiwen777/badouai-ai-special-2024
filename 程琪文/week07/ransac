import numpy as np
import scipy as sp
import scipy.linalg as sl
from Cython import typeof
import matplotlib.pyplot as plt

def ransac(data, model, n, k, t, d, debug=False, return_all=False):
    iterations = 0
    bestfit = None
    besterr = np.inf
    best_inlier_idxs = None

    while iterations < k:
        maybe_idxs, test_idxs = random_partition(n, data.shape[0])
        maybe_inliers = data[maybe_idxs, :]
        # test_points = data[test_idxs, :]
        test_points = data[test_idxs]
        maybe_model = model.fit(maybe_inliers)
        test_err = model.get_error(test_points, maybe_model)
        also_idxs = test_idxs[test_err < t]
        also_inliers = data[also_idxs, :]
        if debug:
            print('test_err.min()', test_err.min())
            print('test_err.max()', test_err.max())
            print('np.mean(test_err)', np.mean(test_err))
            print('iteration %d : len(also_inliers) = %d' % (iterations, len(also_inliers)))
        if len(also_inliers) > d:
            betterdata = np.concatenate((maybe_inliers, also_inliers))
            bettermodel = model.fit(betterdata)
            better_errs = model.get_error(betterdata, bettermodel)
            thiserr = np.mean(better_errs)
            if thiserr < besterr:
                besterr = thiserr
                bestfit = bettermodel
                best_inlier_idxs = np.concatenate((maybe_idxs, also_idxs))
        iterations += 1

    if bestfit is None:
        raise ValueError("did't meet fit acceptance criteria")
    if return_all:
        return bestfit, {'inliers': best_inlier_idxs}
    else:
        return bestfit

def random_partition(n, n_data):
    all_idxs = np.arange(n_data)
    np.random.shuffle(all_idxs)
    idxs1 = all_idxs[:n]
    idxs2 = all_idxs[n:]
    return idxs1, idxs2

class LinearLeastSquareModel:
    def __init__(self, input_cols, output_cols, debug=False):
        self.input_columns = input_cols
        self.output_columns = output_cols
        self.debug = debug

    def fit(self, data):
        A = np.vstack([data[:, i] for i in self.input_columns]).T
        B = np.vstack([data[:, i] for i in self.output_columns]).T
        x, resids, rank, s = sl.lstsq(A, B)
        return x

    def get_error(self, data, model):
        A = np.vstack([data[:, i] for i in self.input_columns]).T
        B = np.vstack([data[:, i] for i in self.output_columns]).T
        B_fit = np.dot(A, model)
        err_per_point = np.sum((B-B_fit)**2, axis=1)
        # err_per_point = np.sum((B-B_fit)**2)
        return err_per_point


if __name__ == '__main__':
    # 生成理想数据
    n_samples = 500
    n_inputs = 1
    n_outputs = 1
    x_exact = 20 * np.random.random((n_samples, n_inputs))
    perfect_fit = 60 * np.random.normal(size=(n_inputs, n_outputs))
    y_exact = np.dot(x_exact, perfect_fit)  # 矩阵乘法

    # 加入高斯噪声,最小二乘能很好的处理
    x_noisy = x_exact + np.random.normal(size=x_exact.shape)  # 500 * 1行向量,代表Xi
    y_noisy = y_exact + np.random.normal(size=y_exact.shape)  # 500 * 1行向量,代表Yi

    if 1:
        # 添加离群点
        n_outliers = 100
        all_idxs = np.arange(x_noisy.shape[0])
        np.random.shuffle(all_idxs)  # 仅适用于一维数组
        outlier_idxs = all_idxs[:n_outliers]
        x_noisy[outlier_idxs] = 20 * np.random.random((n_outliers, n_inputs))
        y_noisy[outlier_idxs] = 50 * np.random.random(size=(n_outliers, n_outputs))

    # setup model
    all_data = np.hstack((x_noisy, y_noisy))  # 形式([Xi,Yi]....) shape:(500,2)500行2列
    input_columns = range(n_inputs)
    output_columns = [n_inputs + i for i in range(n_outputs)]
    debug = False
    model = LinearLeastSquareModel(input_columns, output_columns, debug)

    # linear_fit最小二乘的系数，resids残差平方和，rank是输入矩阵的秩
    linear_fit, resids, rank, s = sl.lstsq(all_data[:, input_columns], all_data[:, output_columns])

    # run RANSAC 算法
    ransac_fit, ransac_data = ransac(all_data, model, 50, 1000, 7e3, 300, debug=debug, return_all=True)

    if 1:
        sort_idxs = np.argsort(x_exact[:, 0])
        x_col0_sorted = x_exact[sort_idxs]  # 秩为2的数组

        if 1:
            plt.plot(x_noisy[:, 0], y_noisy[:, 0], 'k.', label='data')
            plt.plot(x_noisy[ransac_data['inliers'], 0], y_noisy[ransac_data['inliers'], 0], 'bx', label='ransac data')
        # else:
        #     plt.plot(x_noisy[non_outlier_idxs, 0], y_noisy[non_outlier_idxs, 0], 'k.', label='noisy data')
        #     plt.plot(x_noisy[outlier_idxs, 0], y_noisy[outlier_idxs, 0], 'r.', label='outlier data')

        plt.plot(x_col0_sorted[:, 0],
                 np.dot(x_col0_sorted, ransac_fit)[:, 0],
                 label='RANSAC fit')
        plt.plot(x_col0_sorted[:, 0],
                 np.dot(x_col0_sorted, perfect_fit)[:, 0],
                 label='exact system')
        plt.plot(x_col0_sorted[:, 0],
                 np.dot(x_col0_sorted, linear_fit)[:, 0],
                 label='linear fit')
        plt.legend()
        plt.show()

