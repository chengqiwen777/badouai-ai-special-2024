import tensorflow as tf
from tensorflow.keras import layers, models

# Inception 模块实现
def InceptionModule(x, filters):
    # 1x1卷积路径
    branch1x1 = layers.Conv2D(filters[0], (1, 1), padding='same', activation='relu')(x)

    # 1x1卷积 + 3x3卷积路径
    branch3x3 = layers.Conv2D(filters[1], (1, 1), padding='same', activation='relu')(x)
    branch3x3 = layers.Conv2D(filters[2], (3, 3), padding='same', activation='relu')(branch3x3)

    # 1x1卷积 + 5x5卷积路径
    branch5x5 = layers.Conv2D(filters[3], (1, 1), padding='same', activation='relu')(x)
    branch5x5 = layers.Conv2D(filters[4], (5, 5), padding='same', activation='relu')(branch5x5)

    # 3x3最大池化 + 1x1卷积路径
    branchpool = layers.MaxPooling2D((3, 3), strides=(1, 1), padding='same')(x)
    branchpool = layers.Conv2D(filters[5], (1, 1), padding='same', activation='relu')(branchpool)

    # 将四个分支的输出并联
    return layers.Concatenate()([branch1x1, branch3x3, branch5x5, branchpool])

# 构建 InceptionV3 网络架构
def InceptionV3(input_shape=(299, 299, 3), num_classes=1000):
    inputs = layers.Input(shape=input_shape)

    # 第一层：卷积 + 池化
    x = layers.Conv2D(32, (3, 3), strides=(2, 2), padding='valid', activation='relu')(inputs)
    x = layers.Conv2D(32, (3, 3), padding='valid', activation='relu')(x)
    x = layers.MaxPooling2D((3, 3), strides=(2, 2))(x)

    # 第二层：卷积 + 池化
    x = layers.Conv2D(64, (3, 3), padding='same', activation='relu')(x)
    x = layers.MaxPooling2D((3, 3), strides=(2, 2))(x)

    # 第三层：Inception 模块堆叠
    x = InceptionModule(x, [64, 128, 128, 32, 32, 32])  # 第一个Inception模块
    x = InceptionModule(x, [128, 256, 256, 64, 64, 64])  # 第二个Inception模块
    x = InceptionModule(x, [256, 512, 512, 128, 128, 128])  # 第三个Inception模块

    # 第四层：全局平均池化
    x = layers.GlobalAveragePooling2D()(x)

    # 全连接层
    x = layers.Dense(1024, activation='relu')(x)
    x = layers.Dense(num_classes, activation='softmax')(x)

    # 构建模型
    model = models.Model(inputs, x, name='InceptionV3')
    return model

# 创建InceptionV3模型
model = InceptionV3(input_shape=(299, 299, 3), num_classes=1000)

# 编译模型
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 打印模型结构
model.summary()
